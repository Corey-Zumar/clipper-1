<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="354" onload="init(evt)" viewBox="0 0 1200 354" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
				return a - b;
			if (a < b || a > b)
				return a - b;
			return matches[b] - matches[a];
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="354.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="337" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="337" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_start (9 samples, 0.02%)</title><rect x="1189.7" y="273" width="0.2" height="15.0" fill="rgb(236,90,3)" rx="2" ry="2" />
<text text-anchor="" x="1192.66" y="283.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (5 samples, 0.01%)</title><rect x="1188.3" y="161" width="0.1" height="15.0" fill="rgb(246,119,43)" rx="2" ry="2" />
<text text-anchor="" x="1191.25" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_emplace_back_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8 samples, 0.02%)</title><rect x="29.8" y="145" width="0.2" height="15.0" fill="rgb(246,174,46)" rx="2" ry="2" />
<text text-anchor="" x="32.77" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::rpc::RPCService::manage_service (696 samples, 1.56%)</title><rect x="30.3" y="209" width="18.5" height="15.0" fill="rgb(241,172,45)" rx="2" ry="2" />
<text text-anchor="" x="33.33" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (4 samples, 0.01%)</title><rect x="1184.5" y="49" width="0.1" height="15.0" fill="rgb(206,19,44)" rx="2" ry="2" />
<text text-anchor="" x="1187.46" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::json::parse_json (42,861 samples, 96.26%)</title><rect x="49.2" y="129" width="1135.8" height="15.0" fill="rgb(254,74,21)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clipper::json::parse_json</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (44,527 samples, 100%)</title><rect x="10.0" y="305" width="1180.0" height="15.0" fill="rgb(224,157,13)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="315.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>redox::Redox::runEventLoop (6 samples, 0.01%)</title><rect x="30.0" y="225" width="0.2" height="15.0" fill="rgb(230,14,45)" rx="2" ry="2" />
<text text-anchor="" x="33.03" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__memcpy_avx_unaligned (570 samples, 1.28%)</title><rect x="10.7" y="129" width="15.1" height="15.0" fill="rgb(211,40,18)" rx="2" ry="2" />
<text text-anchor="" x="13.69" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>operator new (6 samples, 0.01%)</title><rect x="49.0" y="209" width="0.2" height="15.0" fill="rgb(238,42,48)" rx="2" ry="2" />
<text text-anchor="" x="52.01" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::VersionedModelId::VersionedModelId (8 samples, 0.02%)</title><rect x="10.5" y="161" width="0.2" height="15.0" fill="rgb(216,20,4)" rx="2" ry="2" />
<text text-anchor="" x="13.48" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::DefaultOutputSelectionPolicy::deserialize (42,864 samples, 96.27%)</title><rect x="49.2" y="177" width="1135.9" height="15.0" fill="rgb(224,168,0)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clipper::DefaultOutputSelectionPolicy::deserialize</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::rpc::PredictionRequest::serialize (573 samples, 1.29%)</title><rect x="10.7" y="161" width="15.2" height="15.0" fill="rgb(252,55,54)" rx="2" ry="2" />
<text text-anchor="" x="13.69" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__clone (44,499 samples, 99.94%)</title><rect x="10.2" y="273" width="1179.3" height="15.0" fill="rgb(215,79,6)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="283.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >__clone</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__memcpy_avx_unaligned (675 samples, 1.52%)</title><rect x="30.8" y="161" width="17.9" height="15.0" fill="rgb(232,36,39)" rx="2" ry="2" />
<text text-anchor="" x="33.78" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (42 samples, 0.09%)</title><rect x="1188.4" y="193" width="1.1" height="15.0" fill="rgb(246,32,18)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (12 samples, 0.03%)</title><rect x="1188.4" y="177" width="0.3" height="15.0" fill="rgb(217,133,38)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5 samples, 0.01%)</title><rect x="10.6" y="145" width="0.1" height="15.0" fill="rgb(205,94,7)" rx="2" ry="2" />
<text text-anchor="" x="13.56" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sys_execve (4 samples, 0.01%)</title><rect x="1189.9" y="257" width="0.1" height="15.0" fill="rgb(223,82,43)" rx="2" ry="2" />
<text text-anchor="" x="1192.89" y="267.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (4 samples, 0.01%)</title><rect x="1188.1" y="161" width="0.1" height="15.0" fill="rgb(235,181,54)" rx="2" ry="2" />
<text text-anchor="" x="1191.12" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Hashtable&lt;long, std::pair&lt;long const, clipper::CacheEntry&gt;, std::allocator&lt;std::pair&lt;long const, clipper::CacheEntry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.02%)</title><rect x="1186.1" y="129" width="0.3" height="15.0" fill="rgb(234,208,3)" rx="2" ry="2" />
<text text-anchor="" x="1189.10" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (4 samples, 0.01%)</title><rect x="1188.1" y="145" width="0.1" height="15.0" fill="rgb(223,81,23)" rx="2" ry="2" />
<text text-anchor="" x="1191.12" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (42,840 samples, 96.21%)</title><rect x="49.2" y="65" width="1135.3" height="15.0" fill="rgb(225,109,37)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="75.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >malloc</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (9 samples, 0.02%)</title><rect x="1188.4" y="145" width="0.2" height="15.0" fill="rgb(229,116,52)" rx="2" ry="2" />
<text text-anchor="" x="1191.41" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (42 samples, 0.09%)</title><rect x="1188.4" y="209" width="1.1" height="15.0" fill="rgb(252,193,42)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::rpc::RPCService::send_messages (689 samples, 1.55%)</title><rect x="30.4" y="193" width="18.3" height="15.0" fill="rgb(207,37,48)" rx="2" ry="2" />
<text text-anchor="" x="33.41" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (4 samples, 0.01%)</title><rect x="28.4" y="145" width="0.1" height="15.0" fill="rgb(206,13,14)" rx="2" ry="2" />
<text text-anchor="" x="31.42" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>realloc (17 samples, 0.04%)</title><rect x="1184.6" y="81" width="0.4" height="15.0" fill="rgb(207,75,7)" rx="2" ry="2" />
<text text-anchor="" x="1187.57" y="91.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::vector&lt;std::shared_ptr&lt;clipper::Timer&gt;, std::allocator&lt;std::shared_ptr&lt;clipper::Timer&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::shared_ptr&lt;clipper::Timer&gt; &gt; (12 samples, 0.03%)</title><rect x="1187.3" y="161" width="0.4" height="15.0" fill="rgb(210,180,0)" rx="2" ry="2" />
<text text-anchor="" x="1190.35" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::DoubleVector::serialize (570 samples, 1.28%)</title><rect x="10.7" y="145" width="15.1" height="15.0" fill="rgb(210,101,37)" rx="2" ry="2" />
<text text-anchor="" x="13.69" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>operator new (4 samples, 0.01%)</title><rect x="1188.1" y="177" width="0.1" height="15.0" fill="rgb(226,41,25)" rx="2" ry="2" />
<text text-anchor="" x="1191.12" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::GenericDocument&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;, rapidjson::CrtAllocator&gt;::EndObject (42,840 samples, 96.21%)</title><rect x="49.2" y="97" width="1135.3" height="15.0" fill="rgb(239,28,26)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >rapidjson::GenericDocument&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;, rapidjson::CrtAllocator&gt;::EndObject</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>return_from_execve (4 samples, 0.01%)</title><rect x="1189.9" y="273" width="0.1" height="15.0" fill="rgb(249,185,13)" rx="2" ry="2" />
<text text-anchor="" x="1192.89" y="283.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>copy_user_enhanced_fast_string (4 samples, 0.01%)</title><rect x="1189.4" y="49" width="0.1" height="15.0" fill="rgb(214,77,1)" rx="2" ry="2" />
<text text-anchor="" x="1192.39" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (17 samples, 0.04%)</title><rect x="1184.6" y="65" width="0.4" height="15.0" fill="rgb(210,227,21)" rx="2" ry="2" />
<text text-anchor="" x="1187.57" y="75.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::internal::Stack&lt;rapidjson::CrtAllocator&gt;::Expand&lt;rapidjson::GenericValue&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt; &gt; &gt; (17 samples, 0.04%)</title><rect x="1184.6" y="97" width="0.4" height="15.0" fill="rgb(232,69,49)" rx="2" ry="2" />
<text text-anchor="" x="1187.57" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_dl_start_user (6 samples, 0.01%)</title><rect x="1189.5" y="273" width="0.2" height="15.0" fill="rgb(213,44,1)" rx="2" ry="2" />
<text text-anchor="" x="1192.50" y="283.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>send_predictions (42,988 samples, 96.54%)</title><rect x="49.2" y="209" width="1139.2" height="15.0" fill="rgb(252,94,22)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >send_predictions</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_dl_init (4 samples, 0.01%)</title><rect x="1189.5" y="257" width="0.1" height="15.0" fill="rgb(205,180,20)" rx="2" ry="2" />
<text text-anchor="" x="1192.50" y="267.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::internal::Stack&lt;rapidjson::CrtAllocator&gt;::Expand&lt;char&gt; (4 samples, 0.01%)</title><rect x="1184.5" y="81" width="0.1" height="15.0" fill="rgb(233,7,49)" rx="2" ry="2" />
<text text-anchor="" x="1187.46" y="91.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boost::detail::task_shared_state&lt;std::_Bind&lt;std::function&lt;void  (745 samples, 1.67%)</title><rect x="10.2" y="209" width="19.8" height="15.0" fill="rgb(229,228,26)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>start_thread (44,499 samples, 99.94%)</title><rect x="10.2" y="257" width="1179.3" height="15.0" fill="rgb(241,219,0)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="267.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >start_thread</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Function_handler&lt;void  (745 samples, 1.67%)</title><rect x="10.2" y="193" width="19.8" height="15.0" fill="rgb(220,95,37)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::GenericReader&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::UTF8&lt;char&gt;, rapidjson::CrtAllocator&gt;::ParseObject&lt;0u, rapidjson::GenericStringStream&lt;rapidjson::UTF8&lt;char&gt; &gt;, rapidjson::GenericDocument&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;, rapidjson::CrtAllocator&gt; &gt; (42,861 samples, 96.26%)</title><rect x="49.2" y="113" width="1135.8" height="15.0" fill="rgb(206,207,30)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >rapidjson::GenericReader&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::UTF8&lt;char&gt;, rapidjson::CrtAllocator&gt;::ParseObject&lt;0u, rapidjson::GenericStringStream&lt;rapidjson::UTF..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>run_benchmark (8 samples, 0.02%)</title><rect x="1189.7" y="225" width="0.2" height="15.0" fill="rgb(212,196,32)" rx="2" ry="2" />
<text text-anchor="" x="1192.68" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__memset_avx2 (11 samples, 0.02%)</title><rect x="1186.1" y="97" width="0.3" height="15.0" fill="rgb(242,176,9)" rx="2" ry="2" />
<text text-anchor="" x="1189.10" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sysmalloc (6 samples, 0.01%)</title><rect x="1188.5" y="113" width="0.1" height="15.0" fill="rgb(237,150,6)" rx="2" ry="2" />
<text text-anchor="" x="1191.49" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;::Malloc (42,840 samples, 96.21%)</title><rect x="49.2" y="81" width="1135.3" height="15.0" fill="rgb(239,115,48)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="91.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;::Malloc</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sock_recvmsg (30 samples, 0.07%)</title><rect x="1188.7" y="113" width="0.8" height="15.0" fill="rgb(248,138,44)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (6 samples, 0.01%)</title><rect x="49.0" y="193" width="0.2" height="15.0" fill="rgb(209,27,11)" rx="2" ry="2" />
<text text-anchor="" x="52.01" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__libc_start_main (9 samples, 0.02%)</title><rect x="1189.7" y="257" width="0.2" height="15.0" fill="rgb(243,45,9)" rx="2" ry="2" />
<text text-anchor="" x="1192.66" y="267.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (42,840 samples, 96.21%)</title><rect x="49.2" y="49" width="1135.3" height="15.0" fill="rgb(237,133,16)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >_int_malloc</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>inet_recvmsg (30 samples, 0.07%)</title><rect x="1188.7" y="97" width="0.8" height="15.0" fill="rgb(244,47,35)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>do_execveat_common.isra.33 (4 samples, 0.01%)</title><rect x="1189.9" y="241" width="0.1" height="15.0" fill="rgb(221,110,53)" rx="2" ry="2" />
<text text-anchor="" x="1192.89" y="251.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (8 samples, 0.02%)</title><rect x="1189.7" y="177" width="0.2" height="15.0" fill="rgb(243,184,6)" rx="2" ry="2" />
<text text-anchor="" x="1192.68" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libstdc++.so.6.0.21] (44,457 samples, 99.84%)</title><rect x="10.2" y="241" width="1178.2" height="15.0" fill="rgb(237,64,50)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="251.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >[libstdc++.so.6.0.21]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>copy_user_enhanced_fast_string (19 samples, 0.04%)</title><rect x="1188.9" y="33" width="0.5" height="15.0" fill="rgb(208,10,16)" rx="2" ry="2" />
<text text-anchor="" x="1191.89" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (13 samples, 0.03%)</title><rect x="30.4" y="129" width="0.4" height="15.0" fill="rgb(242,110,19)" rx="2" ry="2" />
<text text-anchor="" x="33.43" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>load_elf_binary (4 samples, 0.01%)</title><rect x="1189.9" y="209" width="0.1" height="15.0" fill="rgb(208,37,38)" rx="2" ry="2" />
<text text-anchor="" x="1192.89" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>zmq_send (689 samples, 1.55%)</title><rect x="30.4" y="177" width="18.3" height="15.0" fill="rgb(216,201,2)" rx="2" ry="2" />
<text text-anchor="" x="33.41" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::DefaultOutputSelectionState::deserialize (42,862 samples, 96.26%)</title><rect x="49.2" y="145" width="1135.8" height="15.0" fill="rgb(240,187,21)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clipper::DefaultOutputSelectionState::deserialize</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Impl&lt;std::_Bind_simple&lt;run_benchmark (43,003 samples, 96.58%)</title><rect x="48.8" y="225" width="1139.6" height="15.0" fill="rgb(248,54,46)" rx="2" ry="2" />
<text text-anchor="" x="51.77" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::_Impl&lt;std::_Bind_simple&lt;run_benchmark</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::vector&lt;std::pair&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, clipper::PredictTask&gt;, std::allocator&lt;std::pair&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, clipper::PredictTask&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;&amp;, clipper::PredictTask&gt; (21 samples, 0.05%)</title><rect x="1186.4" y="161" width="0.6" height="15.0" fill="rgb(218,59,39)" rx="2" ry="2" />
<text text-anchor="" x="1189.40" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::PredictionCache::fetch (11 samples, 0.02%)</title><rect x="1186.1" y="161" width="0.3" height="15.0" fill="rgb(238,218,27)" rx="2" ry="2" />
<text text-anchor="" x="1189.10" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__libc_recv (30 samples, 0.07%)</title><rect x="1188.7" y="177" width="0.8" height="15.0" fill="rgb(224,123,2)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (11 samples, 0.02%)</title><rect x="1188.4" y="161" width="0.3" height="15.0" fill="rgb(209,6,54)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::vector&lt;clipper::PredictTask, std::allocator&lt;clipper::PredictTask&gt; &gt;::_M_emplace_back_aux&lt;clipper::PredictTask const&amp;&gt; (28 samples, 0.06%)</title><rect x="27.4" y="161" width="0.8" height="15.0" fill="rgb(217,67,3)" rx="2" ry="2" />
<text text-anchor="" x="30.41" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::ThreadPool::worker (747 samples, 1.68%)</title><rect x="10.2" y="225" width="19.8" height="15.0" fill="rgb(227,149,53)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (8 samples, 0.02%)</title><rect x="1187.7" y="129" width="0.3" height="15.0" fill="rgb(225,170,47)" rx="2" ry="2" />
<text text-anchor="" x="1190.75" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>call_init.part.0 (4 samples, 0.01%)</title><rect x="1189.5" y="241" width="0.1" height="15.0" fill="rgb(226,121,27)" rx="2" ry="2" />
<text text-anchor="" x="1192.50" y="251.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sysmalloc (42,544 samples, 95.55%)</title><rect x="57.0" y="33" width="1127.5" height="15.0" fill="rgb(254,153,52)" rx="2" ry="2" />
<text text-anchor="" x="60.01" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >sysmalloc</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>copy_page_to_iter_iovec (7 samples, 0.02%)</title><rect x="1188.7" y="33" width="0.2" height="15.0" fill="rgb(206,210,41)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>search_binary_handler (4 samples, 0.01%)</title><rect x="1189.9" y="225" width="0.1" height="15.0" fill="rgb(235,25,47)" rx="2" ry="2" />
<text text-anchor="" x="1192.89" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>tcp_recvmsg (30 samples, 0.07%)</title><rect x="1188.7" y="81" width="0.8" height="15.0" fill="rgb(240,172,54)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="91.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>operator new (8 samples, 0.02%)</title><rect x="1187.7" y="161" width="0.3" height="15.0" fill="rgb(230,61,18)" rx="2" ry="2" />
<text text-anchor="" x="1190.75" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>operator new (5 samples, 0.01%)</title><rect x="1188.3" y="193" width="0.1" height="15.0" fill="rgb(217,97,8)" rx="2" ry="2" />
<text text-anchor="" x="1191.25" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (9 samples, 0.02%)</title><rect x="1188.4" y="129" width="0.2" height="15.0" fill="rgb(209,172,46)" rx="2" ry="2" />
<text text-anchor="" x="1191.41" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sys_recvfrom (30 samples, 0.07%)</title><rect x="1188.7" y="145" width="0.8" height="15.0" fill="rgb(237,216,43)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::vector&lt;clipper::InflightMessage, std::allocator&lt;clipper::InflightMessage&gt; &gt;::_M_emplace_back_aux&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;&amp;, int&amp;, clipper::VersionedModelId&amp;, int&amp;, std::shared_ptr&lt;clipper::Input&gt;&amp;&gt; (58 samples, 0.13%)</title><rect x="25.9" y="161" width="1.5" height="15.0" fill="rgb(218,184,53)" rx="2" ry="2" />
<text text-anchor="" x="28.87" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>bench_utils::load_cifar2 (8 samples, 0.02%)</title><rect x="1189.7" y="209" width="0.2" height="15.0" fill="rgb(239,61,49)" rx="2" ry="2" />
<text text-anchor="" x="1192.68" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::TaskExecutor::on_container_ready (676 samples, 1.52%)</title><rect x="10.2" y="177" width="18.0" height="15.0" fill="rgb(206,184,24)" rx="2" ry="2" />
<text text-anchor="" x="13.24" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (5 samples, 0.01%)</title><rect x="1188.3" y="177" width="0.1" height="15.0" fill="rgb(222,4,6)" rx="2" ry="2" />
<text text-anchor="" x="1191.25" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20 samples, 0.04%)</title><rect x="29.2" y="145" width="0.6" height="15.0" fill="rgb(208,19,48)" rx="2" ry="2" />
<text text-anchor="" x="32.24" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::rpc::PredictionResponse::deserialize_prediction_response (55 samples, 0.12%)</title><rect x="28.5" y="161" width="1.5" height="15.0" fill="rgb(242,75,44)" rx="2" ry="2" />
<text text-anchor="" x="31.52" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (4 samples, 0.01%)</title><rect x="1184.5" y="33" width="0.1" height="15.0" fill="rgb(244,209,22)" rx="2" ry="2" />
<text text-anchor="" x="1187.46" y="43.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_int_malloc (17 samples, 0.04%)</title><rect x="1184.6" y="49" width="0.4" height="15.0" fill="rgb(254,203,45)" rx="2" ry="2" />
<text text-anchor="" x="1187.57" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::TimerSystem&lt;clipper::HighPrecisionClock&gt;::set_timer (27 samples, 0.06%)</title><rect x="1187.0" y="177" width="0.7" height="15.0" fill="rgb(220,121,41)" rx="2" ry="2" />
<text text-anchor="" x="1189.95" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>skb_copy_datagram_iter (30 samples, 0.07%)</title><rect x="1188.7" y="65" width="0.8" height="15.0" fill="rgb(205,13,43)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="75.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (14 samples, 0.03%)</title><rect x="30.4" y="161" width="0.4" height="15.0" fill="rgb(238,40,1)" rx="2" ry="2" />
<text text-anchor="" x="33.41" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (8 samples, 0.02%)</title><rect x="1189.7" y="193" width="0.2" height="15.0" fill="rgb(220,90,46)" rx="2" ry="2" />
<text text-anchor="" x="1192.68" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::QueryProcessor::predict (42,983 samples, 96.53%)</title><rect x="49.2" y="193" width="1139.1" height="15.0" fill="rgb(211,99,53)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="203.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clipper::QueryProcessor::predict</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (8 samples, 0.02%)</title><rect x="1187.7" y="145" width="0.3" height="15.0" fill="rgb(220,211,39)" rx="2" ry="2" />
<text text-anchor="" x="1190.75" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::VersionedModelId::VersionedModelId (5 samples, 0.01%)</title><rect x="28.4" y="161" width="0.1" height="15.0" fill="rgb(225,148,27)" rx="2" ry="2" />
<text text-anchor="" x="31.39" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>entry_SYSCALL_64_fastpath (30 samples, 0.07%)</title><rect x="1188.7" y="161" width="0.8" height="15.0" fill="rgb(239,34,12)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (42 samples, 0.09%)</title><rect x="1188.4" y="225" width="1.1" height="15.0" fill="rgb(228,162,43)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::DefaultOutputSelectionState::DefaultOutputSelectionState (42,862 samples, 96.26%)</title><rect x="49.2" y="161" width="1135.8" height="15.0" fill="rgb(208,189,31)" rx="2" ry="2" />
<text text-anchor="" x="52.17" y="171.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clipper::DefaultOutputSelectionState::DefaultOutputSelectionState</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rapidjson::GenericReader&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::UTF8&lt;char&gt;, rapidjson::CrtAllocator&gt;::ParseString&lt;0u, rapidjson::GenericStringStream&lt;rapidjson::UTF8&lt;char&gt; &gt;, rapidjson::GenericDocument&lt;rapidjson::UTF8&lt;char&gt;, rapidjson::MemoryPoolAllocator&lt;rapidjson::CrtAllocator&gt;, rapidjson::CrtAllocator&gt; &gt; (4 samples, 0.01%)</title><rect x="1184.5" y="97" width="0.1" height="15.0" fill="rgb(218,222,9)" rx="2" ry="2" />
<text text-anchor="" x="1187.46" y="107.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>realloc (4 samples, 0.01%)</title><rect x="1184.5" y="65" width="0.1" height="15.0" fill="rgb(250,40,14)" rx="2" ry="2" />
<text text-anchor="" x="1187.46" y="75.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SYSC_recvfrom (30 samples, 0.07%)</title><rect x="1188.7" y="129" width="0.8" height="15.0" fill="rgb(239,136,47)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sysmalloc (12 samples, 0.03%)</title><rect x="30.5" y="113" width="0.3" height="15.0" fill="rgb(237,132,17)" rx="2" ry="2" />
<text text-anchor="" x="33.46" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ev_run (6 samples, 0.01%)</title><rect x="30.0" y="209" width="0.2" height="15.0" fill="rgb(244,96,22)" rx="2" ry="2" />
<text text-anchor="" x="33.03" y="219.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Hashtable&lt;long, std::pair&lt;long const, clipper::CacheEntry&gt;, std::allocator&lt;std::pair&lt;long const, clipper::CacheEntry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;unsigned long, clipper::CacheEntry&gt; &gt; (11 samples, 0.02%)</title><rect x="1186.1" y="145" width="0.3" height="15.0" fill="rgb(251,181,30)" rx="2" ry="2" />
<text text-anchor="" x="1189.10" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>folly::Promise&lt;folly::Unit&gt;::Promise (8 samples, 0.02%)</title><rect x="1187.7" y="177" width="0.3" height="15.0" fill="rgb(242,96,36)" rx="2" ry="2" />
<text text-anchor="" x="1190.75" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::TaskExecutor::schedule_predictions (66 samples, 0.15%)</title><rect x="1185.2" y="177" width="1.8" height="15.0" fill="rgb(241,71,27)" rx="2" ry="2" />
<text text-anchor="" x="1188.20" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>repeatedly_report_and_clear_metrics (5 samples, 0.01%)</title><rect x="30.2" y="225" width="0.1" height="15.0" fill="rgb(252,142,8)" rx="2" ry="2" />
<text text-anchor="" x="33.19" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Hashtable&lt;long, std::pair&lt;long const, clipper::CacheEntry&gt;, std::allocator&lt;std::pair&lt;long const, clipper::CacheEntry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (11 samples, 0.02%)</title><rect x="1186.1" y="113" width="0.3" height="15.0" fill="rgb(235,212,39)" rx="2" ry="2" />
<text text-anchor="" x="1189.10" y="123.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>end_to_end_benc (44,527 samples, 100.00%)</title><rect x="10.0" y="289" width="1180.0" height="15.0" fill="rgb(235,121,41)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="299.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >end_to_end_benc</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Impl&lt;std::_Bind_simple&lt;clipper::rpc::RPCService::start (696 samples, 1.56%)</title><rect x="30.3" y="225" width="18.5" height="15.0" fill="rgb(215,161,4)" rx="2" ry="2" />
<text text-anchor="" x="33.33" y="235.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clipper::TaskExecutor::on_response_recv (69 samples, 0.15%)</title><rect x="28.2" y="177" width="1.8" height="15.0" fill="rgb(253,26,22)" rx="2" ry="2" />
<text text-anchor="" x="31.15" y="187.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>copy_page_to_iter (26 samples, 0.06%)</title><rect x="1188.7" y="49" width="0.7" height="15.0" fill="rgb(227,23,41)" rx="2" ry="2" />
<text text-anchor="" x="1191.70" y="59.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__memcpy_avx_unaligned (20 samples, 0.04%)</title><rect x="29.2" y="129" width="0.6" height="15.0" fill="rgb(218,152,44)" rx="2" ry="2" />
<text text-anchor="" x="32.24" y="139.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libzmq.so.5.0.0] (42 samples, 0.09%)</title><rect x="1188.4" y="241" width="1.1" height="15.0" fill="rgb(227,54,19)" rx="2" ry="2" />
<text text-anchor="" x="1191.38" y="251.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>malloc (13 samples, 0.03%)</title><rect x="30.4" y="145" width="0.4" height="15.0" fill="rgb(250,130,46)" rx="2" ry="2" />
<text text-anchor="" x="33.43" y="155.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>main (8 samples, 0.02%)</title><rect x="1189.7" y="241" width="0.2" height="15.0" fill="rgb(253,10,17)" rx="2" ry="2" />
<text text-anchor="" x="1192.68" y="251.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
